<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serycjon's blog (Posts about emacs)</title><link>https://serycjon.github.io/</link><description></description><atom:link href="https://serycjon.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:jonas.serych@gmail.com"&gt;serycjon&lt;/a&gt; </copyright><lastBuildDate>Fri, 30 Jun 2017 10:25:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Org-babel python table header</title><link>https://serycjon.github.io/posts/org-babel-python-table-header/</link><dc:creator>serycjon</dc:creator><description>&lt;p&gt;
Recently, I finally found a good use-case for python code block in an
org-mode file. My goal was to generate a table, which wasn't hard at all:
&lt;/p&gt;
&lt;pre class="example"&gt;
#+BEGIN_SRC python :results table :exports results
  table = []
  for i in range(4):
      table.append([i, 2**i])
  return table
#+END_SRC
&lt;/pre&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" class="table-condensed table-bordered"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Nice, but how to add a header (give each column a name)?  It is quite
surprising, how hard it is to find any relevant info about that.
After some elisp research, I have discovered
&lt;code&gt;org-babel-python-None-to&lt;/code&gt; variable, which defaults to &lt;code&gt;hline&lt;/code&gt;.  With
that set, it is now easy to add header separator by simply inserting
&lt;code&gt;None&lt;/code&gt; into the list returned by the python code as in the following example.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC python :results table :exports results
  table = [['#n', 'n-th power of 2'], None]
  for i in range(4):
      table.append([i, 2**i])
  return table
#+END_SRC
&lt;/pre&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" class="table-condensed table-bordered"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;#n&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;n-th power of 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
BTW I have added the following setting in the Nikola orgmode plugin
init.el in order to style the tables nicely.
&lt;/p&gt;

&lt;pre class="example"&gt;
(setq org-html-table-default-attributes
      (quote
       (:border "2" :cellspacing "0" :cellpadding "6" :rules "groups"
		:frame "hsides" :class "table-condensed table-bordered")))
&lt;/pre&gt;</description><category>emacs</category><guid>https://serycjon.github.io/posts/org-babel-python-table-header/</guid><pubDate>Fri, 30 Jun 2017 09:18:57 GMT</pubDate></item><item><title>Blogging with Nikola</title><link>https://serycjon.github.io/posts/blogging-with-nikola/</link><dc:creator>serycjon</dc:creator><description>&lt;p&gt;
I have been using &lt;a href="http://blogger.com"&gt;blogger.com&lt;/a&gt; for posting photos and stories about
my travels. Recently I have done some experiments with Jekyll
(&lt;a href="http://jekyllrb.com"&gt;jekyllrb.com&lt;/a&gt;) - a ruby based static site generator. Althought it is
possible to get it working with org-mode, it didn't feel like I will
stuck to it.
&lt;/p&gt;

&lt;p&gt;
A few days ago, &lt;a href="http://cestlaz.github.io/posts/using-emacs-35-blogging/"&gt;this&lt;/a&gt; post about blogging with Emacs org-mode and
&lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; was published and I decided I will give it a try.
&lt;/p&gt;

&lt;p&gt;
Nikola is a static site generator written in python with many neat
features, here is how I've got it running.
&lt;/p&gt;

&lt;div id="outline-container-org3242198" class="outline-2"&gt;
&lt;h2 id="org3242198"&gt;Basic Nikola installation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3242198"&gt;
&lt;/div&gt;&lt;div id="outline-container-orgc10b795" class="outline-3"&gt;
&lt;h3 id="orgc10b795"&gt;virtualenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc10b795"&gt;
&lt;p&gt;
I have never used python virtual environments and installed all the
packages globally, but since I use python 2.7 and Nikola wants
python 3, I gave it a try.
&lt;/p&gt;

&lt;p&gt;
Install virtualenv and virtualenvwrapper
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install virtualenv virtualenvwrapper
$ mkdir ~/.virtualenvs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Set some variables and source the virtualenvwrapper - add this
to .zshrc (or .bashrc).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold;"&lt;/span&gt;&amp;gt;export&amp;lt;/span&amp;gt; &amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;WORKON_HOME&amp;lt;/span&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;$&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;HOME&amp;lt;/span&amp;gt;/.virtualenvs
&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold;"&lt;/span&gt;&amp;gt;export&amp;lt;/span&amp;gt; &amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;PROJECT_HOME&amp;lt;/span&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;$&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;HOME&amp;lt;/span&amp;gt;/dev
&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold;"&lt;/span&gt;&amp;gt;source&amp;lt;/span&amp;gt; /usr/share/virtualenvwrapper/virtualenvwrapper_lazy.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Don't forget to restart the shell or source the .zshrc afterwards.
&lt;/p&gt;

&lt;p&gt;
Now you are ready to create the virtual environment for your blog:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3 blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
After this, it is possible to get inside this environment with
&lt;code&gt;workon blog&lt;/code&gt; and get out of it with &lt;code&gt;deactivate&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org16c68fe" class="outline-3"&gt;
&lt;h3 id="org16c68fe"&gt;First steps with Nikola&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org16c68fe"&gt;
&lt;p&gt;
Getting started with Nikola is just extremely simple. First install
it (and the optional extras) with
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon blog
$ pip install &amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-style: italic;"&lt;/span&gt;&amp;gt;&lt;span class="s2"&gt;"Nikola[extras]"&lt;/span&gt;&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
With the engine installed, use the following command to create a
directory with a new site (containing some demo content), build the
blog and start a server (running on localhost:8000).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nikola init --demo blog_dir
$ nikola build
$ nikola serve -b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The build and serve can be automated by &lt;code&gt;nikola auto&lt;/code&gt;, which starts
a server but also looks for any changes and rebuild the site if necessary.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga397ba0" class="outline-2"&gt;
&lt;h2 id="orga397ba0"&gt;Getting Emacs involved&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga397ba0"&gt;
&lt;/div&gt;&lt;div id="outline-container-org8e39988" class="outline-3"&gt;
&lt;h3 id="org8e39988"&gt;Orgmode plugin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8e39988"&gt;
&lt;p&gt;
At this point, you can easily start to publish your awesome content
by calling
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which will create a new reStructuredText file in the &lt;code&gt;posts/&lt;/code&gt;
directory. Yet another markdown? Fortunately, there is a more
comfortable way - nikola orgmode &lt;a href="https://plugins.getnikola.com/v7/orgmode/"&gt;plugin&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Install it with
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nikola plugin -i orgmode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
You will then have to add some simple stuff to the site &lt;code&gt;conf.py&lt;/code&gt; file, as
described during the installation (and on the plugin web page).
&lt;/p&gt;

&lt;p&gt;
From now on, you can call
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post posts/filename.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
to create a new blog post with pre-generated nikola metadata.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgacacc35" class="outline-3"&gt;
&lt;h3 id="orgacacc35"&gt;YASnippet post template&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgacacc35"&gt;
&lt;p&gt;
Org-mode with it's tables, babel and other awesome stuff already
works at this point, but I didn't really like to call the
&lt;code&gt;new_post&lt;/code&gt; command, so I have taken the content it generates and
put it into a YASnippet template.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# key: post
# name: post
# --
#+BEGIN_COMMENT
.. title: ${1:post title}
.. slug: ${1:$(replace-regexp-in-string
                 &amp;lt;span style="font-style: italic;"&amp;gt;"[&amp;lt;/span&amp;gt;&amp;lt;span style="font-style: italic;"&amp;gt;^&amp;lt;/span&amp;gt;&amp;lt;span style="font-style: italic;"&amp;gt;0-9a-z-]"&amp;lt;/span&amp;gt; &amp;lt;span style="font-style: italic;"&amp;gt;""&amp;lt;/span&amp;gt;
           (replace-regexp-in-string
             &amp;lt;span style="font-style: italic;"&amp;gt;" "&amp;lt;/span&amp;gt; &amp;lt;span style="font-style: italic;"&amp;gt;"-"&amp;lt;/span&amp;gt;
             (downcase yas-text)))&amp;lt;span style="font-weight: bold;"&amp;gt;}&amp;lt;/span&amp;gt;
.. date: `(format-time-string &amp;lt;span style="font-style: italic;"&amp;gt;"%Y-%m-%d %H:%M:%S %Z%z"&amp;lt;/span&amp;gt;)`
.. tags:
.. category:
.. link:
.. description:
.. type: text
#+END_COMMENT

$0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This way, I can just create new &lt;code&gt;posts/filename.org&lt;/code&gt;, write &lt;code&gt;post&lt;/code&gt;,
press &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; to expand the snippet and I am good to go. The
template even parses the post title and automatically creates
a pretty url.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org656ad8d" class="outline-3"&gt;
&lt;h3 id="org656ad8d"&gt;Full management from Emacs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org656ad8d"&gt;
&lt;p&gt;
The last slightly annoying thing is the need of switching the
python environment and running &lt;code&gt;nikola auto&lt;/code&gt;.  Mike Zamansky has
suggested using &lt;a href="https://github.com/rejeep/prodigy.el"&gt;prodigy&lt;/a&gt;, which is a very nice package I have
started using recently for running &lt;a href="https://www.npmjs.com/package/imapnotify"&gt;imapnotify&lt;/a&gt; and &lt;a href="http://jonls.dk/redshift/"&gt;redshift&lt;/a&gt; (check
them out, if you don't know them yet).
&lt;/p&gt;

&lt;p&gt;
The issue with Mike's solution is the need to manually set the
Emacs virtualenv. I have played with it a bit and found a
simple prodigy-only way.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(prodigy-define-service
  &amp;lt;span style="font-weight: bold;"&amp;gt;:name&amp;lt;/span&amp;gt; &amp;lt;span style="font-style: italic;"&amp;gt;"Nikola"&amp;lt;/span&amp;gt;
  &amp;lt;span style="font-weight: bold;"&amp;gt;:command&amp;lt;/span&amp;gt; &amp;lt;span style="font-style: italic;"&amp;gt;"nikola"&amp;lt;/span&amp;gt;
  &amp;lt;span style="font-weight: bold;"&amp;gt;:args&amp;lt;/span&amp;gt; (list &amp;lt;span style="font-style: italic;"&amp;gt;"auto"&amp;lt;/span&amp;gt;)
  &amp;lt;span style="font-weight: bold;"&amp;gt;:cwd&amp;lt;/span&amp;gt; &amp;lt;span style="font-style: italic;"&amp;gt;"/path_to_the/nikola_blog/"&amp;lt;/span&amp;gt;
  &amp;lt;span style="font-weight: bold;"&amp;gt;:tags&amp;lt;/span&amp;gt; '(nikola)
  &amp;lt;span style="font-weight: bold;"&amp;gt;:init&amp;lt;/span&amp;gt; '(lambda () (pyvenv-workon &amp;lt;span style="font-style: italic;"&amp;gt;"blog"&amp;lt;/span&amp;gt;))
  &amp;lt;span style="font-weight: bold;"&amp;gt;:kill-signal&amp;lt;/span&amp;gt; 'sigkill)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org38a411f" class="outline-2"&gt;
&lt;h2 id="org38a411f"&gt;Other stuff&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org38a411f"&gt;
&lt;/div&gt;&lt;div id="outline-container-orga0cc864" class="outline-3"&gt;
&lt;h3 id="orga0cc864"&gt;Blogger.com import&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga0cc864"&gt;
&lt;p&gt;
You can export your whole site from blogger.com in Settings &amp;gt; Other
&amp;gt; Import &amp;amp; back up, which creates a single xml file with all your
posts. These can then be easily imported using &lt;code&gt;import_blogger&lt;/code&gt;
plugin.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nikola plugin -i import_blogger
&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;# &amp;lt;/span&amp;gt;&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;This didn&lt;span class="err"&gt;'&lt;/span&gt;t work, because of a missing dependency, so repeat after:&amp;lt;/span&amp;gt;
$ pip install feedparser

&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;# &amp;lt;/span&amp;gt;&amp;lt;span &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"font-weight: bold; font-style: italic;"&lt;/span&gt;&amp;gt;do this outside the site directory and copy the posts afterwards&amp;lt;/span&amp;gt;
$ nikola import_blogger the_blogger_export.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb346f96" class="outline-3"&gt;
&lt;h3 id="orgb346f96"&gt;Github pages deploy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb346f96"&gt;
&lt;p&gt;
Making your site public using Github pages is extremely simple,
just follow the steps in the Nikola handbook:
&lt;a href="https://getnikola.com/handbook.html#deploying-to-github"&gt;https://getnikola.com/handbook.html#deploying-to-github&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>https://serycjon.github.io/posts/blogging-with-nikola/</guid><pubDate>Thu, 29 Jun 2017 13:13:43 GMT</pubDate></item></channel></rss>